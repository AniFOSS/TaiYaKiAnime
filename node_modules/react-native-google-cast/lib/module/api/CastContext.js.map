{"version":3,"sources":["CastContext.ts"],"names":["NativeEventEmitter","NativeModules","SessionManager","RNGCCastContext","Native","EventEmitter","CastContext","getCastState","getCurrentCastSession","getClient","session","client","showCastDialog","showExpandedControls","showIntroductoryOverlay","options","once","onCastStateChanged","listener","addListener","CAST_STATE_CHANGED"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,aAA7B,QAAkD,cAAlD;AAIA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAM;AAAEC,EAAAA,eAAe,EAAEC;AAAnB,IAA8BH,aAApC;AACA,MAAMI,YAAY,GAAG,IAAIL,kBAAJ,CAAuBI,MAAvB,CAArB;AAEA;;;;;;;;;;;;AAWA,eAAe,MAAME,WAAN,CAAkB;AAC/B;AACA,SAAOC,YAAP,GAA0C;AACxC,WAAOH,MAAM,CAACG,YAAP,EAAP;AACD;AAED;;;;;AAGA,eAAaC,qBAAb,GAAkE;AAChE,WAAO,IAAIN,cAAJ,GAAqBM,qBAArB,EAAP;AACD;AAED;;;;;AAGA,eAAaC,SAAb,GAA4D;AAC1D,UAAMC,OAAO,GAAG,MAAM,KAAKF,qBAAL,EAAtB;AACA,WAAOE,OAAO,GAAGA,OAAO,CAACC,MAAX,GAAoB,IAAlC;AACD;AAED;;;;;;;AAKA,SAAOC,cAAP,GAA0C;AACxC,WAAOR,MAAM,CAACQ,cAAP,EAAP;AACD;AAED;;;;;;;AAKA,SAAOC,oBAAP,GAAgD;AAC9C,WAAOT,MAAM,CAACS,oBAAP,EAAP;AACD;AAED;;;;;;;;;AAOA,SAAOC,uBAAP,CAA+BC,OAA/B,EAEqB;AACnB,WAAOX,MAAM,CAACU,uBAAP,CAA+B;AAAEE,MAAAA,IAAI,EAAE,IAAR;AAAc,SAAGD;AAAjB,KAA/B,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;AAeA,SAAOE,kBAAP,CAA0BC,QAA1B,EAAoE;AAClE,WAAOb,YAAY,CAACc,WAAb,CAAyBf,MAAM,CAACgB,kBAAhC,EAAoDF,QAApD,CAAP;AACD;;AArE8B","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native'\nimport CastState from '../types/CastState'\nimport CastSession from './CastSession'\nimport RemoteMediaClient from './RemoteMediaClient'\nimport SessionManager from './SessionManager'\n\nconst { RNGCCastContext: Native } = NativeModules\nconst EventEmitter = new NativeEventEmitter(Native)\n\n/**\n * A root class containing global objects and state for the Cast SDK. It is the default export of this library.\n *\n * @example\n * ```js\n * import GoogleCast, { CastContext } from 'react-native-google-cast'\n * // GoogleCast and CastContext are equivalent\n * ```\n *\n * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastContext) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_cast_context) | [Chrome](https://developers.google.com/cast/docs/reference/chrome/cast.framework.CastContext)\n */\nexport default class CastContext {\n  /** The current casting state for the application. */\n  static getCastState(): Promise<CastState> {\n    return Native.getCastState()\n  }\n\n  /**\n   * Returns the current session if it is an instance of {@link CastSession}, otherwise returns `null` (if you manually create a custom {@link Session} with the {@link SessionManager}).\n   */\n  static async getCurrentCastSession(): Promise<CastSession | null> {\n    return new SessionManager().getCurrentCastSession()\n  }\n\n  /**\n   * Convenience method to get the RemoteMediaClient associated with current session.\n   */\n  static async getClient(): Promise<RemoteMediaClient | null> {\n    const session = await this.getCurrentCastSession()\n    return session ? session.client : null\n  }\n\n  /**\n   * Displays the Cast Dialog programmatically. Users can also open the Cast Dialog by clicking on a Cast Button.\n   *\n   * @returns `true` if the Cast Dialog was shown, `false` if it was not shown.\n   */\n  static showCastDialog(): Promise<boolean> {\n    return Native.showCastDialog()\n  }\n\n  /**\n   * Displays the Expanded Controls screen programmatically. Users can also open it by clicking on Mini Controls.\n   *\n   * @returns `true` if the Expanded Controls were shown, `false` if it was not shown.\n   */\n  static showExpandedControls(): Promise<boolean> {\n    return Native.showExpandedControls()\n  }\n\n  /**\n   * If it has not been shown before, presents a fullscreen modal view controller that calls attention to the Cast button and displays some brief instructional text about its use.\n   *\n   * By default, the overlay is only displayed once. To change this, pass `once: false` in the options.\n   *\n   * @returns Promise that becomes `true` if the view controller was shown, `false` if it was not shown because it had already been shown before, or if the Cast Button was not found.\n   */\n  static showIntroductoryOverlay(options?: {\n    once?: boolean\n  }): Promise<boolean> {\n    return Native.showIntroductoryOverlay({ once: true, ...options })\n  }\n\n  /**\n   * Listen for changes of the Cast State.\n   *\n   * @example\n   * ```js\n   * const subscription = CastContext.onCastStateChanged(castState => {\n   *   if (castState === 'connected') {\n   *     // ... ready to go\n   *   }\n   * })\n   *\n   * // later, to stop listening\n   * subscription.remove()\n   * ```\n   */\n  static onCastStateChanged(listener: (castState: CastState) => void) {\n    return EventEmitter.addListener(Native.CAST_STATE_CHANGED, listener)\n  }\n}\n"]}