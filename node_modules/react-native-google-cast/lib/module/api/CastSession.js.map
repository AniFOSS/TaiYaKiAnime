{"version":3,"sources":["CastSession.ts"],"names":["NativeEventEmitter","NativeModules","RemoteMediaClient","RNGCCastSession","Native","EventEmitter","CastSession","constructor","args","id","getActiveInputState","getApplicationMetadata","getApplicationStatus","getCastDevice","getClient","client","getStandbyState","getVolume","isMute","sendMessage","namespace","message","setMute","mute","setVolume","volume","onActiveInputStateChanged","listener","addListener","ACTIVE_INPUT_STATE_CHANGED","onMessage","MESSAGE_RECEIVED","ns","onStandbyStateChanged","STANDBY_STATE_CHANGED"],"mappings":";;AAAA,SAASA,kBAAT,EAA6BC,aAA7B,QAAkD,cAAlD;AAKA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,MAAM;AAAEC,EAAAA,eAAe,EAAEC;AAAnB,IAA8BH,aAApC;AACA,MAAMI,YAAY,GAAG,IAAIL,kBAAJ,CAAuBI,MAAvB,CAArB;AAEA;;;;;;AAKA,eAAe,MAAME,WAAN,CAAkB;AAG/B;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAwB;AAAA,oCAL1B,IAAIN,iBAAJ,EAK0B;;AAAA;;AACjC,SAAKO,EAAL,GAAUD,IAAI,CAACC,EAAf;AACD;AAED;;;AACAC,EAAAA,mBAAmB,GAA8B;AAC/C,WAAON,MAAM,CAACM,mBAAP,EAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,sBAAsB,GAAiC;AACrD,WAAOP,MAAM,CAACO,sBAAP,EAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,oBAAoB,GAAoB;AACtC,WAAOR,MAAM,CAACQ,oBAAP,EAAP;AACD;AAED;;;;;AAGAC,EAAAA,aAAa,GAAoB;AAC/B,WAAOT,MAAM,CAACS,aAAP,EAAP;AACD;;AAEDC,EAAAA,SAAS,GAAsB;AAC7B,WAAO,KAAKC,MAAZ;AACD;AAED;;;;;AAGAC,EAAAA,eAAe,GAA0B;AACvC,WAAOZ,MAAM,CAACY,eAAP,EAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,SAAS,GAAoB;AAC3B,WAAOb,MAAM,CAACa,SAAP,EAAP;AACD;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAqB;AACzB,WAAOd,MAAM,CAACc,MAAP,EAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,WAAW,CAACC,SAAD,EAAoBC,OAApB,EAAoD;AAC7D,WAAOjB,MAAM,CAACe,WAAP,CAAmBC,SAAnB,EAA8BC,OAA9B,CAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,OAAO,CAACC,IAAD,EAA+B;AACpC,WAAOnB,MAAM,CAACkB,OAAP,CAAeC,IAAf,CAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,SAAS,CAACC,MAAD,EAAgC;AACvC,WAAOrB,MAAM,CAACkB,OAAP,CAAeG,MAAf,CAAP;AACD,GAjG8B,CAmG/B;AACA;AACA;;;AAEAC,EAAAA,yBAAyB,CAACC,QAAD,EAA8C;AACrE,WAAOtB,YAAY,CAACuB,WAAb,CAAyBxB,MAAM,CAACyB,0BAAhC,EAA4DF,QAA5D,CAAP;AACD;AAED;;;;;;;;AAMAG,EAAAA,SAAS,CAACV,SAAD,EAAoBO,QAApB,EAAyD;AAChE,WAAOtB,YAAY,CAACuB,WAAb,CACLxB,MAAM,CAAC2B,gBADF,EAEL,CAACC,EAAD,EAAKX,OAAL,KAAiBD,SAAS,KAAKY,EAAd,IAAoBL,QAAQ,CAACN,OAAD,CAFxC,CAAP;AAID;;AAEDY,EAAAA,qBAAqB,CAACN,QAAD,EAA0C;AAC7D,WAAOtB,YAAY,CAACuB,WAAb,CAAyBxB,MAAM,CAAC8B,qBAAhC,EAAuDP,QAAvD,CAAP;AACD;;AA1H8B","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native'\nimport ActiveInputState from '../types/ActiveInputState'\nimport ApplicationMetadata from '../types/ApplicationMetadata'\nimport Device from '../types/Device'\nimport StandbyState from '../types/StandbyState'\nimport RemoteMediaClient from './RemoteMediaClient'\n\nconst { RNGCCastSession: Native } = NativeModules\nconst EventEmitter = new NativeEventEmitter(Native)\n\n/**\n * Cast sessions are created and managed automatically by the {@link SessionManager}, for example when the user selects a Cast device from the media route controller dialog. The current active CastSession can be accessed by {@link CastContext.getCurrentCastSession}.\n *\n * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_cast_session) | [Chrome](https://developers.google.com/cast/docs/reference/chrome/cast.framework.CastSession)\n */\nexport default class CastSession {\n  client = new RemoteMediaClient()\n\n  /** Unique session ID. */\n  id?: string\n\n  constructor(args: { id?: string }) {\n    this.id = args.id\n  }\n\n  /** Indicates whether a receiver device is currently the active video input. Active input state can only be reported when the Google cast device is connected to a TV or AVR with CEC support. */\n  getActiveInputState(): Promise<ActiveInputState> {\n    return Native.getActiveInputState()\n  }\n\n  /**\n   * Returns the metadata for the currently running receiver application, or `null` if the metadata is unavailable.\n   *\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#getApplicationMetadata()) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_cast_session.html#aa48324aeb26bd15ec3b7e052138ea48c) | [Chrome](https://developers.google.com/cast/docs/reference/chrome/cast.framework.CastSession#getApplicationMetadata)\n   */\n  getApplicationMetadata(): Promise<ApplicationMetadata> {\n    return Native.getApplicationMetadata()\n  }\n\n  /**\n   * Returns the current receiver application status, if any. Message text is localized to the Google Cast device's locale.\n   *\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#getApplicationStatus()) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_session#a1821f77bc0c0dc159419608105483a0a) _deviceStatusText_ | [Chrome](https://developers.google.com/cast/docs/reference/chrome/cast.framework.CastSession#getApplicationStatus)\n   */\n  getApplicationStatus(): Promise<string> {\n    return Native.getApplicationStatus()\n  }\n\n  /**\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#getCastDevice()) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_session#a30d6130e558b235e37f1cbded2d27ce8) | [Chrome](https://developers.google.com/cast/docs/reference/chrome/cast.framework.CastSession#getCastDevice)\n   */\n  getCastDevice(): Promise<Device> {\n    return Native.getCastDevice()\n  }\n\n  getClient(): RemoteMediaClient {\n    return this.client\n  }\n\n  /**\n   * Indicates whether a receiver device's connected TV or AVR is currently in \"standby\" mode.\n   */\n  getStandbyState(): Promise<StandbyState> {\n    return Native.getStandbyState()\n  }\n\n  /**\n   * Returns the device's volume.\n   *\n   * @returns {number} Volume in the range [0.0, 1.0].\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#getVolume()) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_session#af4120ee98a679c4ed3abc6ba6b59cf12)\n   */\n  getVolume(): Promise<number> {\n    return Native.getVolume()\n  }\n\n  /**\n   * @returns {boolean}\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#isMute())\n   */\n  isMute(): Promise<boolean> {\n    return Native.isMute()\n  }\n\n  /**\n   * Send a message to the Cast receiver using a custom namespace. Use when you've built a custom receiver and want to communicate with it.\n   *\n   * @param namespace A custom identifier starting with `urn:x-cast:`, for example `urn:x-cast:com.reactnative.googlecast.example`. The namespace name is arbitrary; just make sure it's unique.\n   * @param message message to be sent\n   */\n  sendMessage(namespace: string, message: string): Promise<void> {\n    return Native.sendMessage(namespace, message)\n  }\n\n  /**\n   * Mutes or unmutes the device's audio.\n   *\n   * @param mute The new mute state.\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#setMute(boolean)) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_session#aac1dc4461b6d7ae6f1f5f9dc93cafebd)\n   */\n  setMute(mute: boolean): Promise<void> {\n    return Native.setMute(mute)\n  }\n\n  /**\n   * Sets the device volume.\n   *\n   * @param volume If volume is outside of the range [0.0, 1.0], then the value will be clipped.\n   * @see [Android](https://developers.google.com/android/reference/com/google/android/gms/cast/framework/CastSession.html#setVolume(double)) | [iOS](https://developers.google.com/cast/docs/reference/ios/interface_g_c_k_session#a68dcca2fdf1f4aebee394f0af56e7fb8)\n   */\n  setVolume(volume: number): Promise<void> {\n    return Native.setMute(volume)\n  }\n\n  // ========== //\n  //   EVENTS   //\n  // ========== //\n\n  onActiveInputStateChanged(listener: (state: ActiveInputState) => void) {\n    return EventEmitter.addListener(Native.ACTIVE_INPUT_STATE_CHANGED, listener)\n  }\n\n  /**\n   * Registers a listener for messages send from a Cast receiver. Use when you've built a custom receiver and want to communicate with it.\n   *\n   * @param namespace A custom identifier starting with `urn:x-cast:`, for example `urn:x-cast:com.reactnative.googlecast.example`. The namespace name is arbitrary; just make sure it's unique.\n   * @param listener function to be invoked when a Cast receiver sends a message to this sender.\n   */\n  onMessage(namespace: string, listener: (message: string) => void) {\n    return EventEmitter.addListener(\n      Native.MESSAGE_RECEIVED,\n      (ns, message) => namespace === ns && listener(message)\n    )\n  }\n\n  onStandbyStateChanged(listener: (state: StandbyState) => void) {\n    return EventEmitter.addListener(Native.STANDBY_STATE_CHANGED, listener)\n  }\n}\n"]}